buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0"
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.4'
    }
}

apply from: "$rootDir/gradle/sonar.gradle"

allprojects {
    group = 'com.iadams.sonarqube'
    version = '0.1'
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: "info.solidsoft.pitest"
    apply from: "$rootDir/gradle/jacoco.gradle"

    apply plugin: "com.github.hierynomus.license"
    license {
        header rootProject.file('LICENSE')
        includes(["**/*.java", "**/*.groovy"])
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        jcenter()
    }

    ext {
        sonarVersion = '4.5.2'
        sslrVersion = '1.20'
    }

    dependencies {
        testCompile "org.spockframework:spock-core:1.0-groovy-2.3"
        testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
        testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)
    }

    sourceSets {
        integTest {
            groovy.srcDir file('src/integTest/groovy')
            resources.srcDir file('src/integTest/resources')
            compileClasspath = sourceSets.main.output + configurations.testRuntime
            runtimeClasspath = output + compileClasspath
        }
    }

    task integTest(type: Test) {
        testClassesDir = sourceSets.integTest.output.classesDir
        classpath = sourceSets.integTest.runtimeClasspath
        reports.html.destination = file("$buildDir/reports/integ")
    }

    task testReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/allTests")
        // Include the results from the `test` task in all subprojects
        reportOn test, integTest
    }

    task jacocoIntegTestReport(type: JacocoReport) {
        sourceSets sourceSets.main
        executionData integTest
        reports {
            xml.enabled true
            csv.enabled false
            html.destination "${buildDir}/reports/jacocoIntegTestReport"
        }
    }

    task jacocoCombinedTestReport(type: JacocoReport) {
        sourceSets sourceSets.main
        executionData test, integTest
        reports {
            xml.enabled true
            csv.enabled false
            html.destination "${buildDir}/reports/jacocoCombinedTestReport"
        }
    }

    integTest.finalizedBy (jacocoIntegTestReport, jacocoCombinedTestReport)


    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    build.dependsOn sourcesJar
    build.dependsOn javadocJar

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }
}