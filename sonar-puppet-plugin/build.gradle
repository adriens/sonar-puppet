plugins {
    id "com.iadams.sonar-packaging" version "0.1.1"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functional/groovy')
        resources.srcDir file('src/functional/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$buildDir/reports/functional")
}

dependencies {
    compile project(':puppet-checks')

    provided "org.codehaus.sonar:sonar-plugin-api:$sonarVersion"

    testCompile "org.codehaus.sonar:sonar-plugin-api:$sonarVersion"
    testCompile "org.codehaus.sonar:sonar-testing-harness:$sonarVersion"
    testCompile 'org.apache.maven:maven-project:2.2.1'
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    testRuntime 'org.slf4j:slf4j-simple:1.7.12'
}

sonarPackaging {
    serverUrl = 'http://localhost:9000'
    pluginDir = project.getProperty('sonar.pluginDir')
    pluginKey = 'puppet'
    pluginClass = 'com.iadams.sonarqube.puppet.PuppetPlugin'
    pluginName = 'Puppet'
    pluginDescription = 'Enable analysis and reporting on Puppet projects.'
    pluginDevelopers = 'Iain Adams'
    pluginLicense = 'MIT'
    pluginUrl = 'https://bitbucket.org/iwarapter/sonar-puppet'
    pluginIssueTrackerUrl = 'https://bitbucket.org/iwarapter/sonar-puppet/issues'
    organization {
        name = 'Iain Adams'
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.tests", sourceSets.test.groovy.srcDirs + sourceSets.integTest.groovy.srcDirs
        property "sonar.jacoco.itReportPath", "$buildDir/jacoco/integTest.exec"
    }
}

pitest {
    targetClasses = ['com.iadams.sonarqube.puppet.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
}