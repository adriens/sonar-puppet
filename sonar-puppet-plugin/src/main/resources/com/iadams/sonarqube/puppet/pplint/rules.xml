<?xml version="1.0" encoding="UTF-8"?>
<rules>
  <rule>
    <key>2sp_soft_tabs</key>
    <name><![CDATA[2 Space Soft Tabs]]></name>
    <configKey>2sp_soft_tabs</configKey>
    <description>
      <![CDATA[<p>In order to comply with the style guide, manifests must use 2 space characters when indenting.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
    ensure => present,
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  ensure => present,
}</pre>]]>
    </description>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>hard_tabs</key>
    <name><![CDATA[Hard Tabs]]></name>
    <configKey>hard_tabs</configKey>
    <description>
      <![CDATA[<p>In order to comply with the style guide, manifests must not use hard tab characters (\t) in the whitespace.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
      ensure => present,
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  ensure => present,
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:TabCharacter">TabCharacter</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>trailing_whitespace</key>
    <name><![CDATA[Trailing Whitespace]]></name>
    <configKey>trailing_whitespace</configKey>
    <description>
      <![CDATA[Your manifests must not contain any trailing whitespace on any line.
      <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:S1131">S1131</a> instead.</p>
      ]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>80chars</key>
    <name><![CDATA[80 Character Line Limit]]></name>
    <configKey>80chars</configKey>
    <description>
      <![CDATA[Your manifests should not contain any lines longer than 80 characters.
      <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:LineLength">LineLength</a> instead.</p>
      ]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>arrow_alignment</key>
    <name><![CDATA[Arrow Alignment]]></name>
    <configKey>arrow_alignment</configKey>
    <description>
      <![CDATA[<p>Arrows (=>) within blocks of attributes (like resource declarations, selectors, hashes, etc) should be aligned with the other arrows in that block.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  ensure => present,
  mode => '0444',
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  ensure => present,
  mode   => '0444',
}</pre>]]>
    </description>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>slash_comments</key>
    <name><![CDATA[Slash Comment]]></name>
    <configKey>slash_comments</configKey>
    <description>
      <![CDATA[<p>Although the Puppet language allows you to use // style comments, it is recommended that you use # style comments.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>// my awesome comment</pre>

      <h2>Compliant Solution</h2>

      <pre># my awesome comment</pre>
      <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:CommentConvention">CommentConvention</a> instead.</p>
      ]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>star_comments</key>
    <name><![CDATA[Slash-asterisk Comment]]></name>
    <configKey>star_comments</configKey>
    <description>
      <![CDATA[<p>Although the Puppet language allows you to use /* */ style multiline comments, it is recommended that you use multiple # style comments instead.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
/* my awesome comment that describes
* exactly what I'm trying to do */
      </pre>

      <h2>Compliant Solution</h2>

      <pre>
# my awesome comment that describes
# exactly what I'm trying to do
      </pre>
      <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:CommentConvention">CommentConvention</a> instead.</p>
      ]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>double_quoted_strings</key>
    <name><![CDATA[Double Quoted Strings]]></name>
    <configKey>double_quoted_strings</configKey>
    <description>
      <![CDATA[<p>All strings that do not contain variables or escape characters like \n or \t should be enclosed in single quotes.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
$foo = "bar"
      </pre>

      <h2>Compliant Solution</h2>

      <pre>
$foo = 'bar'
      </pre>
      <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:FaultyDoubleQuotedString">FaultyDoubleQuotedString</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>variables_not_enclosed</key>
    <name><![CDATA[Variables Not Enclosed]]></name>
    <configKey>variables_not_enclosed</configKey>
    <description>
      <![CDATA[<p>All variables should be enclosed in in braces ({}) when being interpolated in a string.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
$foo = "bar $baz"
      </pre>

      <h2>Compliant Solution</h2>

      <pre>
$foo = "bar ${baz}"
      </pre>
      <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:VariableNotEnclosedInBraces">VariableNotEnclosedInBraces</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>only_variable_string</key>
    <name><![CDATA[Only Variable String]]></name>
    <configKey>only_variable_string</configKey>
    <description>
      <![CDATA[<p>Variables standing by themselves should not be quoted. To put it another way, strings should not contain just a single variable.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  owner => "${file_owner}",
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  owner => $file_owner,
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:FaultyDoubleQuotedString">FaultyDoubleQuotedString</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>single_quote_string_with_variables</key>
    <name><![CDATA[Single Quoted String Containing Variables]]></name>
    <configKey>single_quote_string_with_variables</configKey>
    <description>
      <![CDATA[<p>Single quoted strings do not get interpolated, so you should not attempt to embed variables in one. This is not a style issue, rather a common mistake.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
$foo = 'bar ${baz}'
      </pre>

      <h2>Compliant Solution</h2>

      <pre>
$foo = "bar ${baz}"
      </pre>]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>
  <rule>
    <key>quoted_booleans</key>
    <name><![CDATA[Quoted Booleans]]></name>
    <configKey>quoted_booleans</configKey>
    <description>
      <![CDATA[<p>Boolean values (true and false) behave differently when quoted ('true' and 'false'), which can lead to a fair bit of confusion. As a general rule, you should never quote booleans. This is not a style issue, rather a common mistake.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  purge => 'true',
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  purge => true,
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:QuotedBoolean">QuotedBoolean</a> instead.</p>
     ]]>
    </description>
    <priority>CRITICAL</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>puppet_url_without_modules</key>
    <name><![CDATA[puppet:// URL without modules/]]></name>
    <configKey>puppet_url_without_modules</configKey>
    <description>
      <![CDATA[<p>When using puppet:// URLs, you should ensure that the path starts with modules/ (as the most commonly used mount point in the Puppet fileserver).</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/etc/apache/apache2.conf':
  source => 'puppet:///apache/etc/apache/apache2.conf',
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/etc/apache/apache2.conf':
  source => 'puppet:///modules/apache2/etc/apache/apache2.conf',
}</pre>]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>
  <rule>
    <key>unquoted_resource_title</key>
    <name><![CDATA[Unquoted Resource Titles]]></name>
    <configKey>unquoted_resource_title</configKey>
    <description>
      <![CDATA[<p>All resource titles should be quoted.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
service { apache:
  ensure => running,
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
service { 'apache':
  ensure => running,
}</pre>]]>
    </description>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>ensure_first_param</key>
    <name><![CDATA[Attribute Ordering]]></name>
    <configKey>ensure_first_param</configKey>
    <description>
      <![CDATA[<p>If a resource declaration includes an ensure parameter, it should be the first parameter specified.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  owner  => 'root',
  group  => 'root',
  ensure => present,
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  ensure => present,
  owner  => 'root',
  group  => 'root',
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:EnsureOrdering">EnsureOrdering</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>ensure_not_symlink_target</key>
    <name><![CDATA[Ensure Parameter Not A Symlink Target]]></name>
    <configKey>ensure_not_symlink_target</configKey>
    <description>
      <![CDATA[<p>In the interest of clarity, symbolic links should be declared by using an ensure value of ensure => link and explicitly specifying a value for the target attribute. Using a path to the target as the ensure value is not recommended.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  ensure => '/tmp/bar',
}</pre>

        <h2>Compliant Solution</h2>

        <pre>
file { '/tmp/foo':
  ensure => link,
  target => '/tmp/bar',
}</pre>]]>
    </description>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>file_mode</key>
    <name><![CDATA[File Modes]]></name>
    <configKey>file_mode</configKey>
    <description>
      <![CDATA[<p>File modes should be represented as 4 digits rather than 3, to explicitly show that they are octal values. File modes can also be represented symbolically e.g. u=rw,g=r.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  mode => '666',
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  mode => '0666',
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:FileModes">FileModes</a> instead.</p>]]>
    </description>
    <status>DEPRECATED</status>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>unquoted_file_mode</key>
    <name><![CDATA[Unquoted File Modes]]></name>
    <configKey>unquoted_file_mode</configKey>
    <description>
      <![CDATA[<p>File modes should be specified as single-quoted strings instead of bare word numbers.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  mode => 0666,
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  mode => '0666',
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:FileModes">FileModes</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>duplicate_params</key>
    <name><![CDATA[Duplicate Parameters]]></name>
    <configKey>duplicate_params</configKey>
    <description>
      <![CDATA[<p>You really shouldn’t have duplicate parameters in a resource declaration, it is going to lead to strangness.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/foo':
  owner  => 'root',
  owner  => 'foo',
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
file { '/tmp/foo':
  owner  => 'root',
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:DuplicatedParameters">DuplicatedParameters</a> instead.</p>]]>
    </description>
    <priority>CRITICAL</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>selector_inside_resource</key>
    <name><![CDATA[Selector Inside A Resource]]></name>
    <configKey>selector_inside_resource</configKey>
    <description>
      <![CDATA[<p>You should not intermingle conditionals with resource declarations. When using conditionals for data assignment, you should separate conditional code from the resource declarations.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
file { '/tmp/readme.txt':
  mode => $::operatingsystem ? {
    debian => '0777',
    redhat => '0776',
    fedora => '0007',
  }
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
$file_mode = $::operatingsystem ? {
  debian => '0007',
  redhat => '0776',
  fedora => '0007',
}

file { '/tmp/readme.txt':
  mode => $file_mode,
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:ResourceWithSelector">ResourceWithSelector</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>case_without_default</key>
    <name><![CDATA[Case Without A Default Option]]></name>
    <configKey>case_without_default</configKey>
    <description>
      <![CDATA[<p>Case statements should have default cases. Additionally, the default case should fail the catalog compilation when the resulting behavior cannot be predicted on the majority of platforms the module will be used on. If you want the default case to be “do nothing,” include it as an explicit default: {} for clarity’s sake.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
case $::operatingsystem {
  centos: {
    $version = '1.2.3'
  }
  solaris: {
    $version = '3.2.1'
  }
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
case $::operatingsystem {
  centos: {
    $version = '1.2.3'
  }
  solaris: {
    $version = '3.2.1'
  }
  default: {
    fail("Module ${module_name} is not supported on ${::operatingsystem}")
  }
}</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:CaseWithoutDefault">CaseWithoutDefault</a> instead.</p>]]>
    </description>
    <status>DEPRECATED</status>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>autoloader_layout</key>
    <name><![CDATA[Manifest Files In The Proper Layout]]></name>
    <configKey>autoloader_layout</configKey>
    <description>
      <![CDATA[<p>All classes and resource type definitions must be in separate files in the manifests directory of their module. This is functionally identical to declaring all classes and defines in init.pp, but highlights the structure of the module and makes everything more legible.</p>

      <p>Additionally, the files should be named appropriately for the class or defined type they contain. class foo should be in foo/manifests/init.pp, class foo::bar should be in foo/manifests/bar.pp and so on. You can read more about the filesystem layout for modules in the <a href="http://docs.puppetlabs.com/puppet/2.7/reference/modules_fundamentals.html#module-layout">module fundamentals documentation</a>.</p>]]>
    </description>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>right_to_left_relationship</key>
    <name><![CDATA[Right To Left Relationship]]></name>
    <configKey>right_to_left_relationship</configKey>
    <description>
      <![CDATA[<p>Relationship declarations with the chaining syntax should only be used in the “left to right” direction.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
Service['httpd'] <- Package['httpd']</pre>

      <h2>Compliant Solution</h2>

      <pre>
Package['httpd'] -> Service['httpd']</pre>
 <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:RightToLeftChainingArrows">RightToLeftChainingArrows</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>nested_classes_or_defines</key>
    <name><![CDATA[Nested Classes or Defines]]></name>
    <configKey>nested_classes_or_defines</configKey>
    <description>
      <![CDATA[<p>Classes and defined resource types must not be defined within other classes.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
class apache {
  class ssl { }
}

# or

class apache {
  define config() { }
}</pre>

      <h2>Compliant Solution</h2>

      <p>Split these classes and/or defines out into seperate files as described in the <a href="http://docs.puppetlabs.com/puppet/2.7/reference/modules_fundamentals.html#module-layout">module fundamentals documentation</a>.</p>
      <p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:NestedClassesOrDefines">NestedClassesOrDefines</a> instead.</p>]]>
    </description>
    <status>DEPRECATED</status>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>inherits_across_namespaces</key>
    <name><![CDATA[Class Inheritance]]></name>
    <configKey>inherits_across_namespaces</configKey>
    <description>
      <![CDATA[<p>Inheritance may be used within a module, but must not be used across module namespaces. Cross-module dependencies should be satisfied in a more portable way that doesn’t violate the concept of modularity, such as with include statements or relationship declarations.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
class ssh inherits server { }

class ssh::client inherits workstation { }

class wordpress inherits apache { }</pre>

      <h2>Compliant Solution</h2>

      <pre>
class ssh { }

class ssh::client inherits ssh { }

class ssh::server inherits ssh { }

class ssh::server::solaris inherits ssh::server { }</pre>]]>
    </description>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>variable_scope</key>
    <name><![CDATA[Namespacing Variables]]></name>
    <configKey>variable_scope</configKey>
    <description>
      <![CDATA[<p>When using top-scope variables, including facts, Puppet modules should explicitly specify the empty namespace to prevent accidental scoping issues.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
$operatingsystem</pre>

      <h2>Compliant Solution</h2>

      <pre>
$::operatingsystem</pre>]]>
    </description>
    <priority>MINOR</priority>
  </rule>
  <rule>
    <key>variable_contains_dash</key>
    <name><![CDATA[Variable Format]]></name>
    <configKey>variable_contains_dash</configKey>
    <description>
      <![CDATA[<p>When defining variables you should only use letters, numbers and underscores. You should specifically not make use of dashes.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
$foo-bar</pre>

      <h2>Compliant Solution</h2>

      <pre>
$foo_bar</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:VariableNamingConvention">VariableNamingConvention</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>parameter_order</key>
    <name><![CDATA[Parameter Order]]></name>
    <configKey>parameter_order</configKey>
    <description>
      <![CDATA[<p>When defining variables you should only use letters, numbers and underscores. You should specifically not make use of dashes.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
define foo($bar='baz', $gronk) { }</pre>

      <h2>Compliant Solution</h2>

      <pre>
define foo($gronk, $bar='baz') { }</pre>
<p>This rule is deprecated, use <a href="coding_rules#rule_key=puppet:RequiredParametersFirst">RequiredParametersFirst</a> instead.</p>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>class_parameter_defaults</key>
    <name><![CDATA[Class Parameter Defaults]]></name>
    <configKey>class_parameter_defaults</configKey>
    <description>
      <![CDATA[<p>When writing a module that accepts class parameters sane defaults SHOULD be provided for optional parameters to allow the end user the option of not explicitly specifying the parameter when declaring the class.

      This rule is deprecated and has been removed in puppet-lint 1.+</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
class ntp(
 $server,
) {}</pre>

      <h2>Compliant Solution</h2>

      <pre>
class ntp(
  $server = 'UNSET'
) {

  include ntp::params

  $server_real = $server ? {
    'UNSET' => $::ntp::params::server,
    default => $server,
  }
}</pre>]]>
    </description>
    <priority>MINOR</priority>
    <status>DEPRECATED</status>
  </rule>
  <rule>
    <key>class_inherits_from_params_class</key>
    <name><![CDATA[Parameterised class inheritings from ‘params’ class]]></name>
    <configKey>class_inherits_from_params_class</configKey>
    <description>
      <![CDATA[<p>The following popular method SHOULD NOT be used because it is not compatible with Puppet 2.6.2 and earlier.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
class ntp(
  $server = $ntp::params::server
) inherits ntp::params { }</pre>

      <h2>Compliant Solution</h2>

      <pre>
class ntp(
  $server = 'UNSET'
) {

  include ntp::params

  $server_real = $server ? {
    'UNSET' => $::ntp::params::server,
    default => $server,
  }
}</pre>]]>
    </description>
    <priority>MAJOR</priority>
  </rule>
  <rule>
    <key>names_containing_dash</key>
    <name><![CDATA[Module Names Containing A Dash]]></name>
    <configKey>names_containing_dash</configKey>
    <description>
      <![CDATA[<p>Support for dashes in class and defined type names differs depending on the release of Puppet you’re running. To ensure compatibility on all versions, you should avoid using dashes.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
class foo::bar-baz {}</pre>

      <h2>Compliant Solution</h2>

      <pre>
class foo::bar_baz</pre>]]>
    </description>
    <priority>MAJOR</priority>
  </rule>
  <rule>
    <key>documentation</key>
    <name><![CDATA[Documentation]]></name>
    <configKey>documentation</configKey>
    <description>
      <![CDATA[<p>ll Puppet classes and defines should be documented via comments directly above the start of the code.</p>

      <h2>Noncompliant Code Example</h2>

      <pre>
define config() { }

class ntp {}</pre>

      <h2>Compliant Solution</h2>

      <pre>
# Do some config
define config() { }

#or

# Install and configure an NTP server
# You should feel free to expand on this and document any parameters etc
class ntp {}</pre>]]>
    </description>
    <priority>MAJOR</priority>
  </rule>
  <rule>
    <key>unquoted_node_name</key>
    <name><![CDATA[Unquoted Node Name]]></name>
    <configKey>unquoted_node_name</configKey>
    <description>
      <![CDATA[<p>Node names should be one of the following:

      <li>A quoted string</li>
      <li>The bare word default</li>
      <li>A regular expression</li></p>

      <h2>Noncompliant Code Example</h2>

      <pre>
node server1 {
}</pre>

      <h2>Compliant Solution</h2>

      <pre>
node 'server1' {
}</pre>]]>
    </description>
    <priority>MAJOR</priority>
  </rule>
  <rule>
    <key>IgnoredPuppetLintRule</key>
    <name><![CDATA[Ingnored Puppet Lint Rules]]></name>
    <configKey>IgnoredPuppetLintRule</configKey>
    <description>
      <![CDATA[<p>This rule tracks all the instances of puppet <a href="http://puppet-lint.com/controlcomments/">control comments</a>.</p>]]>
    </description>
    <priority>INFO</priority>
  </rule>
</rules>
